from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from ..db import execute, fetchone
from ..config import get_config
from ..keyboards import draft_controls
from ..handlers.forwarded_to_draft import _render_html  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å—Å—ã–ª–æ–∫

router = Router()
cfg = get_config()

def _is_admin(uid: int) -> bool:
    return (not cfg.admin_ids) or (uid in cfg.admin_ids)

class MediaStates(StatesGroup):
    waiting = State()

@router.callback_query(F.data.startswith("edit_media:"))
async def ask_media(cb: CallbackQuery, state: FSMContext):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    did = int(cb.data.split(":")[1])
    await state.update_data(draft_id=did)
    await state.set_state(MediaStates.waiting)
    await cb.message.answer("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç). –ê–ª—å–±–æ–º—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∑–¥–µ—Å—å.")
    await cb.answer()

@router.message(
    MediaStates.waiting,
    F.content_type.in_({ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT})
)
async def set_media(message: Message, state: FSMContext):
    data = await state.get_data()
    did = int(data.get("draft_id"))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ file_id
    if message.content_type == ContentType.PHOTO:
        new_type, file_id = "photo", message.photo[-1].file_id
    elif message.content_type == ContentType.VIDEO:
        new_type, file_id = "video", message.video.file_id
    else:
        new_type, file_id = "document", message.document.file_id

    # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º album_json, –µ—Å–ª–∏ –±—ã–ª–æ)
    execute(
        "UPDATE drafts SET content_type=?, media_file_id=?, album_json=NULL WHERE id=?",
        (new_type, file_id, did),
    )

    # –î–æ—Å—Ç–∞—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∏ —Å–æ–±–∏—Ä–∞–µ–º caption
    row = fetchone("SELECT text FROM drafts WHERE id=?", (did,))
    text = row[0] if row else ""
    html = _render_html(text or "")
    caption = html if html and len(html) <= 1024 else None

    kb = draft_controls(did)

    await message.answer("‚úÖ –ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∏–∂–µ:")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: –º–µ–¥–∏–∞ + –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –≤–ª–µ–∑–∞–µ—Ç)
    if new_type == "photo":
        await message.answer_photo(file_id, caption=caption, parse_mode="HTML" if caption else None,
                                   reply_markup=kb if caption else None)
    elif new_type == "video":
        await message.answer_video(file_id, caption=caption, parse_mode="HTML" if caption else None,
                                   reply_markup=kb if caption else None)
    else:
        await message.answer_document(file_id, caption=caption, parse_mode="HTML" if caption else None,
                                      reply_markup=kb if caption else None)

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –¥–ª–∏–Ω–Ω–∞—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if not caption and html:
        await message.answer(
            html[:4096],
            parse_mode="HTML",
            reply_markup=kb,
            disable_web_page_preview=True
        )

    await state.clear()

@router.message(MediaStates.waiting)
async def reject_non_media(message: Message):
    await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
