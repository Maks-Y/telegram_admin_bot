
from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from ..config import get_config
from ..db import get_setting
from .queue import _show_queue_list
from .drafts_archive import _show_drafts_list, _show_archive_list

router = Router(name="menu")

cfg = get_config()

def _is_admin(uid: int) -> bool:
    return (not cfg.admin_ids) or (uid in cfg.admin_ids)

def reply_compact_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú–µ–Ω—é")]],
        resize_keyboard=True
    )

def inline_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∞ RSS‚Äë–∫–∞–Ω–∞–ª—ã", callback_data="admin:rss"),
         InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",  callback_data="admin:settings")],
        [InlineKeyboardButton(text="üóì –û—á–µ—Ä–µ–¥—å", callback_data="menu:queue"),
         InlineKeyboardButton(text="üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="menu:drafts")],
        [InlineKeyboardButton(text="üóÇ –ê—Ä—Ö–∏–≤", callback_data="menu:archive"),
         InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="admin:help")]
    ])

@router.message(CommandStart())
async def on_start(message: Message):
    if not _is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω."); return
    ch = get_setting("TARGET_CHANNEL_ID") or (cfg.target_channel_id and str(cfg.target_channel_id)) or "‚Äî"
    await message.answer(
        "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ ‚úÖ\n"
        f"–ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <code>{ch}</code>\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ú–µ–Ω—é¬ª –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª—ã.",
        reply_markup=reply_compact_menu()
    )

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    if not _is_admin(message.from_user.id):
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=inline_main_menu())

# –ù–∞–¥—ë–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Reply ¬´–ú–µ–Ω—é¬ª (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è .lower() –≤ —Ñ–∏–ª—å—Ç—Ä–µ)
@router.message(lambda m: isinstance(m.text, str) and m.text.strip().lower() in {"–º–µ–Ω—é", "menu"})
async def text_menu(message: Message):
    if not _is_admin(message.from_user.id):
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=inline_main_menu())

@router.callback_query(F.data == "menu:queue")
async def open_queue(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await _show_queue_list(cb.message)
    await cb.answer()

# –ü–µ—Ä–µ—Ö–æ–¥—ã –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏/–∞—Ä—Ö–∏–≤ (–∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)
@router.callback_query(F.data == "menu:drafts")
async def open_drafts(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await _show_drafts_list(cb.message)
    await cb.answer()

@router.callback_query(F.data == "menu:archive")
async def open_archive(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await _show_archive_list(cb.message)
    await cb.answer()
