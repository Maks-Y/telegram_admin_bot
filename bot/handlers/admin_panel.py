
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from ..config import get_config
from ..db import execute, fetchall, fetchone, get_setting, set_setting

router = Router(name="admin_panel")
cfg = get_config()

def ensure_schema():
    execute("""
    CREATE TABLE IF NOT EXISTS feeds(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url TEXT UNIQUE NOT NULL,
        title TEXT,
        active INTEGER NOT NULL DEFAULT 1,
        etag TEXT,
        last_modified TEXT,
        tags TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    """)
ensure_schema()

def _is_admin(uid: int) -> bool:
    return (not cfg.admin_ids) or (uid in cfg.admin_ids)

def _kb_admin_menu() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üì∞ RSS‚Äë–∫–∞–Ω–∞–ª—ã", callback_data="admin:rss")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",  callback_data="admin:settings")],
        [InlineKeyboardButton(text="üóì –û—á–µ—Ä–µ–¥—å",    callback_data="admin:queue")],
        [InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞",    callback_data="admin:help")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.message(Command("admin"))
async def admin_home(message: Message):
    if not _is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    ch = get_setting("TARGET_CHANNEL_ID") or (cfg.target_channel_id and str(cfg.target_channel_id)) or "‚Äî"
    await message.answer("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n" f"–ö–∞–Ω–∞–ª: <code>{ch}</code>", reply_markup=_kb_admin_menu())

@router.callback_query(F.data == "admin:rss")
async def cb_rss_home(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await cb.message.edit_text("üì∞ RSS‚Äë–∫–∞–Ω–∞–ª—ã", reply_markup=_kb_rss_list())
    await cb.answer()

class RssStates(StatesGroup):
    waiting_url = State()
    waiting_title = State()

def _kb_rss_list() -> InlineKeyboardMarkup:
    rows = []
    feeds = fetchall("SELECT id, url, COALESCE(title,''), COALESCE(active,1) FROM feeds ORDER BY id DESC", ())
    for fid, url, title, active in feeds:
        st = "üîî" if active else "üîï"
        rows.append([InlineKeyboardButton(text=f"{st} {title or url}", callback_data=f"rss:toggle:{fid}")])
        rows.append([InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"rss:retitle:{fid}"),
                     InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å",   callback_data=f"rss:del:{fid}")])
    rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="rss:add")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.callback_query(F.data == "rss:add")
async def cb_rss_add(cb: CallbackQuery, state: FSMContext):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await state.set_state(RssStates.waiting_url)
    await cb.message.answer("–í—Å—Ç–∞–≤—å—Ç–µ URL RSS‚Äë–ª–µ–Ω—Ç—ã (http/https):")
    await cb.answer()

@router.message(RssStates.waiting_url)
async def rss_receive_url(message: Message, state: FSMContext):
    if not _is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω."); return
    url = (message.text or "").strip()
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ü–µ–ª–∏–∫–æ–º (http/https)."); return
    await state.update_data(url=url)
    await state.set_state(RssStates.waiting_title)
    await message.answer("–û–∫. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ ¬´‚Äî¬ª).")

@router.message(RssStates.waiting_title)
async def rss_receive_title(message: Message, state: FSMContext):
    if not _is_admin(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω."); return
    title = (message.text or "").strip()
    if title == "‚Äî": title = ""
    data = await state.get_data(); url = data.get("url")
    execute("INSERT OR IGNORE INTO feeds(url, title, active) VALUES(?,?,1)", (url, title))
    await state.clear()
    await message.answer("‚úÖ –õ–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

@router.callback_query(F.data.startswith("rss:toggle:"))
async def cb_rss_toggle(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    fid = int(cb.data.split(":")[2])
    row = fetchone("SELECT active FROM feeds WHERE id=?", (fid,))
    newv = 0 if int(row[0]) else 1
    execute("UPDATE feeds SET active=? WHERE id=?", (newv, fid))
    await cb.message.edit_text("üì∞ RSS‚Äë–∫–∞–Ω–∞–ª—ã", reply_markup=_kb_rss_list())
    await cb.answer()

@router.callback_query(F.data.startswith("rss:retitle:"))
async def cb_rss_retitle(cb: CallbackQuery, state: FSMContext):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    fid = int(cb.data.split(":")[2])
    await state.update_data(fid=fid)
    await state.set_state(RssStates.waiting_title)
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ ¬´‚Äî¬ª).")
    await cb.answer()

@router.callback_query(F.data.startswith("rss:del:"))
async def cb_rss_del(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    fid = int(cb.data.split(":")[2])
    execute("DELETE FROM feeds WHERE id=?", (fid,))
    await cb.message.edit_text("üì∞ RSS‚Äë–∫–∞–Ω–∞–ª—ã", reply_markup=_kb_rss_list())
    await cb.answer()

# Settings
class SettingsStates(StatesGroup):
    waiting_value = State()

def _kb_settings() -> InlineKeyboardMarkup:
    rows = []
    for key, title in [("TARGET_CHANNEL_ID","ID –∫–∞–Ω–∞–ª–∞"),("TRAILING_URL","–°—Å—ã–ª–∫–∞‚Äë—Ö–≤–æ—Å—Ç"),("TRAILING_TEXT","–¢–µ–∫—Å—Ç —Ö–≤–æ—Å—Ç–∞"),("TZ","–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),("RSS_POLL_INTERVAL","–ò–Ω—Ç–µ—Ä–≤–∞–ª RSS, —Å–µ–∫")]:
        val = get_setting(key)
        rows.append([InlineKeyboardButton(text=f"{title}: {val or '‚Äî'}", callback_data=f"set:key:{key}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.callback_query(F.data == "admin:settings")
async def cb_settings_home(cb: CallbackQuery):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await cb.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=_kb_settings()); await cb.answer()

@router.callback_query(F.data.startswith("set:key:"))
async def cb_settings_key(cb: CallbackQuery, state: FSMContext):
    if not _is_admin(cb.from_user.id):
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    key = cb.data.split(":")[2]
    await state.set_state(SettingsStates.waiting_value); await state.update_data(key=key)
    await cb.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{key}¬ª. –ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å ‚Äî ¬´‚Äî¬ª."); await cb.answer()

@router.message(SettingsStates.waiting_value)
async def settings_receive_value(message: Message, state: FSMContext):
    if not _is_admin(message.from_user.id):
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    data = await state.get_data(); key = data.get("key"); val = (message.text or "").strip()
    if val == "‚Äî":
        execute("DELETE FROM settings WHERE key=?", (key,)); await state.clear()
        await message.answer("‚úÖ –°–±—Ä–æ—à–µ–Ω–æ."); return
    if key == "TARGET_CHANNEL_ID":
        try: int(val)
        except ValueError: await message.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."); return
    set_setting(key, val); await state.clear(); await message.answer("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


@router.callback_query(F.data == "admin:help")
async def cb_admin_help(cb: CallbackQuery):
    await cb.message.answer("–°–ø—Ä–∞–≤–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–µ–Ω—Ç–∞–º–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, –æ—á–µ—Ä–µ–¥—å—é, —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏ –∏ –∞—Ä—Ö–∏–≤–æ–º.")
    await cb.answer()
